#!/usr/bin/env bash

GITHUB_VENDOR_URL=https://github.com/dejwCake/
HARBOR_LARAVEL=harbor-laravel
HARBOR_IONIC=harbor-ionic

function missingHarbor {
    echo "Please use harbor install to add harbor to this folder."
    exit 1
}

function setSed {
    # check sed command
    UNAMEOUT="$(uname -s)"
    case "${UNAMEOUT}" in
    Linux*)
        SEDCMD="sed -i"
        ;;
    Darwin*)
        SEDCMD="sed -i .bak"
        ;;
    MINGW64_NT-10.0*)
        SEDCMD="sed -i"
        ;;
    *)
        echo "Unsupported system type"
        echo "System must be a Macintosh/Linux/Windows"
        echo ""
        echo "System detection determined via uname command"
        echo "If the following is empty, could not find uname command: $(which uname)"
        echo "Your reported uname is: $(uname -s)"
        exit 1
        ;;
    esac
}

function getHarborVersion {
    # get requested harbor version
    HARBOR_VERSION="master"
    for i in "$@"
    do
        case ${i} in
            -b=*|--branch=*|-t=*|--tag=*)
                HARBOR_VERSION="${i#*=}"
                ;;
            *)
                ;;
        esac
    done
}

function getPhpVersion {
    PHP=""
    for i in "$@"
    do
        case ${i} in
            -p=*|--php=*)
                PHP="${i#*=}"
                ;;
        esac
    done
}

function getArgsForNew {
    HARBOR_VERSION="master"
    DEV=""
    num=1
    for i in "$@"
    do
        case ${i} in
            -b=*|--branch=*|-t=*|--tag=*)
                HARBOR_VERSION="${i#*=}"
                ;;

            --dev)
                DEV="--dev"
                ;;

            *)
                if [ $num = 1 ]; then
                    TYPE=$i
                    num=$((num + 1))

                elif [ $num = 2 ]; then
                    DIR=$i
                    num=$((num + 1))

                fi
                ;;
        esac
    done
}

function getArgsForInstall {
    HARBOR_VERSION="master"
    num=1
    for i in "$@"
    do
        case ${i} in
            -b=*|--branch=*|-t=*|--tag=*)
                HARBOR_VERSION="${i#*=}"
                ;;

            *)
                if [[ $num = 1 ]]; then
                    TYPE=$i
                    num=$((num + 1))
                fi
                ;;
        esac
    done
}

function install {
    getArgsForInstall "$@"

    case "$TYPE" in
        craftable|laravel|php)
            HARBOR=${HARBOR_LARAVEL}
            getPhpVersion "$@"
            ;;

        ionic)
            HARBOR=${HARBOR_IONIC}
            ;;

        *)
            echo $"Usage: $0 install {craftable|laravel|php|ionic}"
            exit 1
    esac

    echo "Downloading harbor ..."
    curl -L ${GITHUB_VENDOR_URL}${HARBOR}/archive/${HARBOR_VERSION}.zip > harbor.zip

    echo "Unzipping harbor ..."
    unzip -a -u -q harbor.zip
    HARBOR_DIR=${HARBOR}-${HARBOR_VERSION}
    mv ${HARBOR_DIR}/README.md ./harbor-README.md
    rm -rf ${HARBOR_DIR}/.gitignore
    shopt -s dotglob
    mv ${HARBOR_DIR}/* .

    VERSION=$(./harbor -v)
    MAJOR_VERSION="$(cut -d '.' -f 1 <<< "$VERSION")"
    if [[ $MAJOR_VERSION -eq '3' || $MAJOR_VERSION -eq '4' ]]; then
      cp ./docker-compose.override.example.yml ./docker-compose.override.yml
    fi

    if [[ -n "$PHP" ]]; then
        if [[ $PHP = "8.1" || $PHP = "8.2" || $PHP = "8.3" || $PHP = "8.4" ]]; then
            setSed
            ${SEDCMD} "s/HARBOR_PHP_VERSION=.*/HARBOR_PHP_VERSION=${PHP}/" .env.harbor
            ${SEDCMD} "s/HARBOR_PHP_QA_VERSION=.*/HARBOR_PHP_QA_VERSION=${PHP}/" .env.harbor
        fi
    fi

    echo "Removing zip file ..."
    rm -rf ${HARBOR_DIR}
    rm -rf harbor.zip
}

function update {
    getHarborVersion "$@"

    if [[ -f harbor ]]; then
        TYPE=$(./harbor -t)

        case "$TYPE" in
            craftable|laravel|php)
                HARBOR=${HARBOR_LARAVEL}
                ;;

            ionic)
                HARBOR=${HARBOR_IONIC}
                ;;

            *)
                echo $"Usage: $0 update {craftable|laravel|php|ionic}"
                exit 1
        esac

        VERSION=$(./harbor -v)
        VERSION=$(./harbor -v)
        MAJOR_VERSION="$(cut -d '.' -f 1 <<< "$VERSION")"

        echo -n "Are you sure you want to update harbor, all customization in harbor files will be deleted (y/n)? "
        old_stty_cfg=$(stty -g)
        stty raw -echo ; answer=$(head -c 1) ; stty ${old_stty_cfg} # Careful playing with stty
        if echo "$answer" | grep -iq "^y" ;then
            echo "Downloading harbor ..."
            curl -L ${GITHUB_VENDOR_URL}${HARBOR}/archive/${HARBOR_VERSION}.zip > harbor.zip

            echo "Unzipping harbor ..."
            unzip -a -u -q harbor.zip
            HARBOR_DIR=${HARBOR}-${HARBOR_VERSION}

            NEW_VERSION=$(./${HARBOR_DIR}/harbor -v)
            NEW_VERSION=$(./${HARBOR_DIR}/harbor -v)
            NEW_MAJOR_VERSION="$(cut -d '.' -f 1 <<< "$NEW_VERSION")"
            if [[ $NEW_MAJOR_VERSION -gt $MAJOR_VERSION ]]; then
              echo "Cannot update version $MAJOR_VERSION to version $NEW_MAJOR_VERSION+ automatically, please update manually. New harbor files are in ${HARBOR_DIR}."
              exit 1
            fi

            vercomp $VERSION $NEW_VERSION
            if [[ $? -eq 1 ]]; then
              echo "Cannot update to lower version."
              rm -rf ${HARBOR_DIR}
              rm -rf harbor.zip
              exit 2
            fi

            if [[ $MAJOR_VERSION -eq '1' ]]; then
              updatev1
            elif [[ $MAJOR_VERSION -eq '2' ]]; then
              updatev2
            elif [[ $MAJOR_VERSION -eq '3' ]]; then
              updatev3
            elif [[ $MAJOR_VERSION -eq '4' ]]; then
              updatev4
            fi
            UPDATED=$?

            if [[ $UPDATED == 0 ]]; then
              echo "Clean up ..."
              rm -rf ${HARBOR_DIR}
              rm -rf harbor.zip
            fi
        else
            echo "Aborted"
        fi
    else
        missingHarbor
    fi
}

function updatev1 {
    echo "Removing old harbor ..."
    mkdir -p ./harbor-backup/
    mv docker docker-compose.yml harbor harbor-README.md ./harbor-backup/

    mv ${HARBOR_DIR}/README.md ./harbor-README.md
    rm -rf ${HARBOR_DIR}/.gitignore
    shopt -s dotglob
    mv ${HARBOR_DIR}/* .
    if [[ -d "./harbor-backup/docker/php/ssh" ]]; then
        cp ./harbor-backup/docker/php/ssh/* ./docker/php/ssh/ 2>/dev/null
    fi
    rm -rf harbor-backup
    return 0
}

function updatev2 {
    echo "Removing old harbor ..."
    mkdir -p ./harbor-backup/
    mv docker docker-compose.yml harbor harbor-README.md ./harbor-backup/

    mv ${HARBOR_DIR}/README.md ./harbor-README.md
    rm -rf ${HARBOR_DIR}/.gitignore
    shopt -s dotglob
    mv ${HARBOR_DIR}/* .
    if [[ -d "./harbor-backup/docker/php/ssh" ]]; then
        cp ./harbor-backup/docker/php/ssh/* ./docker/php/ssh/ 2>/dev/null
    fi
    rm -rf harbor-backup
    return 0
}

function updatev3 {
    echo "Removing old harbor ..."
    mkdir -p ./harbor-backup/
    mv .harbor docker-compose.yml docker-compose.override.yml docker-compose.override.example.yml harbor harbor-README.md .env.harbor ./harbor-backup/

    mv ${HARBOR_DIR}/README.md ./harbor-README.md
    rm -rf ${HARBOR_DIR}/.gitignore
    shopt -s dotglob
    mv ${HARBOR_DIR}/* .
    if [[ -d "./harbor-backup/.harbor/ssh" ]]; then
        cp ./harbor-backup/.harbor/ssh/* ./.harbor/ssh/ 2>/dev/null
    fi
    if [[ -d "./harbor-backup/.harbor/db/docker-entrypoint-initdb.d" ]]; then
        cp ./harbor-backup/.harbor/db/docker-entrypoint-initdb.d/* ./.harbor/db/docker-entrypoint-initdb.d/ 2>/dev/null
    fi
    if [[ -d "./harbor-backup/.harbor/db/export" ]]; then
        cp ./harbor-backup/.harbor/db/export/* ./.harbor/db/export/ 2>/dev/null
    fi
    if [[ -d "./harbor-backup/.harbor/db/import" ]]; then
        cp ./harbor-backup/.harbor/db/import/* ./.harbor/db/import/ 2>/dev/null
    fi
    if [[ -d "./harbor-backup/.harbor/db-testing/docker-entrypoint-initdb.d" ]]; then
        cp ./harbor-backup/.harbor/db-testing/docker-entrypoint-initdb.d/* ./.harbor/db-testing/docker-entrypoint-initdb.d/ 2>/dev/null
    fi
    if [[ -f "./harbor-backup/docker-compose.override.yml" ]]; then
        cp ./harbor-backup/docker-compose.override.yml ./docker-compose.override.yml 2>/dev/null
    fi
    if [[ -f "./harbor-backup/.env.harbor" ]]; then
        cp ./harbor-backup/.env.harbor ./.env.harbor 2>/dev/null
    fi
    rm -rf harbor-backup
    return 0
}

function updatev4 {
    #As the v4 structure is the same, we are able to reuse updatev3
    updatev3 "$@"
}

function new {
    getArgsForNew "$@"

    # create dir
    if [[ -z "$DIR" ]]; then
        echo "No directory name provided."
        exit 1
    fi

    mkdir -p ${DIR}
    cd ${DIR}

    getPhpVersion "$@"

    case "$TYPE" in
        craftable)
            install craftable -b=${HARBOR_VERSION} -p=${PHP}
            ./harbor new craftable ${DEV}
            ;;

        laravel)
            install laravel -b=${HARBOR_VERSION} -p=${PHP}
            ./harbor new laravel
            ;;

        php)
            install php -b=${HARBOR_VERSION} -p=${PHP}
            ;;

        ionic)
            install ionic -b=${HARBOR_VERSION}
            ./harbor new ionic
            ;;

        *)
            echo $"Usage: $0 new {craftable|laravel|php|ionic} /path/to/project"
            exit 1
            ;;
    esac
}

function callLocal {
    if [[ -f harbor ]]; then
        echo "Calling local harbor with parameters ..."
        ./harbor "$@"
    else
        missingHarbor
    fi
}

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

case "$1" in
    install)
        # install harbor to current directory
        shift 1
        install "$@"
        ;;

    update)
        # update harbor in current directory
        shift 1
        update "$@"
        ;;

    create-project | new)
        # create new environment
        shift 1
        new "$@"
        ;;

    *)
        # all other commands, call local harbor
        callLocal "$@"
        ;;
esac


